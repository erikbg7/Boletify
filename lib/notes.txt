


Improve coverage


string.contains(search.removeAny(accents))



JOBS
 Unit tests
    - on master
    - on pull request

  Build
    - on master

  Deploy Android Play Store
    - on deployment




- Internet permission in Main/Android Manifest
- flutter_launcher_icons: ^0.8.1 to manage icons and app logo


next commit --> use launcher icons package


/////////// RELEASES
Update manually to Play Store

Keep same name (beta) and increment the build number each time you wanna release a new version.

flutter build appbundle --release --build-name beta --build-number 4


Build 4 (31.4MB)




/////////////////// OFFLINE MODE

https://flutter.dev/docs/cookbook/persistence/reading-writing-files

The behaviour will be the following. First of all we make an API call to get all of the mushroom information.
This information will be written in the AppData directory of the Android app.
From that moment on, each time we start the application we will try to request again the mushroom list, but if we
do not have network connection we will proceed to read from the storage the previous stored list.
This way will be able to completely support offline mode, because both information and TF model will be part of
the application. At some point, we should also consider to implement the same system for the classifier, so we are able to
update things without further application updates.





- Information of each mushroom
- Images of mushrooms
- ML mushroom
- CD pipeline



https://gitmoji.dev/





////////////////////////////////////////


When filters are not active they will be slightly faded.


Validate Feature: we should let the user validate mushrooms.
This means that they will be able to add an image and classify the mushroom manually.
So we are able to reinforce our learning.



////////////////////////////////////////

IN HOME SCREEN
If is offline we show a text: "Seeems that you are offline. However, you can still enjoy
our classification feature". (with a drawn-styled arrow pointing to the Camera bottom navigation item).
Settings should work as well in this case.

If is online, we will fetch mushrooms list from firebase in the background.


IN SEARCH SCREEN

Makes sense to move all the classifier logic to a BLOC. Once we have an image to classify,
we send an event to classify the image, if confidence is higher than 99% we search the mushroom
in our mushroomsList and get the information from there. Otherwise we return a fake unknown
mushroom skeleton.

ClassifierBloc.ClassifyImageEvent(image: image);

MushroomsBloc.FindMushroomEvent(mushroom: mushroomName);


Can we call another bloc event from a different bloc? (e.g. call mushroom find after mushroom classifier)

How do we use the mushroom list from the state that we already have without fetching again
using the event? Is the call cached?


IN SEARCH SCREEN

Any item should be responsive using the height or width of the screen. So we avoid screen overflows.
Use Size.of(context).width

MULTIPLE RESULTS

If confidence is lower than 80% show multiple results.





//////////////////



- Search image


        Container(
          width: 150.0,
          height: 150.0,
          decoration: BoxDecoration(
            color: Color(0xff7c94b6),
            image: DecorationImage(
              image: image == null
                  ? Image.asset('assets/grey.jpg')
                  : FileImage(image),
              fit: BoxFit.cover,
            ),
            borderRadius: BorderRadius.all(Radius.circular(300.0)),
            border: Border.all(
              color: Colors.white,
              width: 3.0,
            ),
          ),
        ),




 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //
 //
 //  List<MushroomDescription> mushroomsBackup;
 //
 //  void _writeJson(dynamic value) {}
 //  void _readJson(dynamic value) {}
 //
 //  Future<String> get _localPath async {
 //    final directory = await getApplicationDocumentsDirectory();
 //    print('77777777777777777');
 //    print(directory.path);
 //    return directory.path;
 //  }
 //
 //  Future<File> get _localFile async {
 //    final path = await _localPath;
 //    return File('$path/$fileName');
 //  }
 //
 //  List<MushroomDescription> getMushroomsBackupList() {
 //    try {} catch (error) {}
 //
 //    print("/////////READ//////////");
 //    _localFile.then((path) async {
 //      var _fileExists = await path.exists();
 //      if(_fileExists) {
 //        var _jsonString = path.readAsStringSync();
 //        var _jsonMap = jsonDecode(_jsonString);
 //        print('RESULT:::: $_jsonString');
 //        print('RESULT2:::: $_jsonMap');
 //        var m = MushroomDescription.fromJson(_jsonMap);
 //        print(m.name);
 //        print(m.scientificName);
 //        print(m.commonNames);
 //        print(m.tags);
 //        print(m.cap);
 //        print(m.gills);
 //        print(m.stalk);
 //        print(m.flesh);
 //        print(m.habitat);
 //        print(m.observations);
 //      }
 //
 ////      print(path);
 ////      var jsonMushroom = list[0].toJson();
 ////      var jsonString = jsonEncode(jsonMushroom);
 ////      print(jsonMushroom);
 ////      print(jsonString);
 ////      path.writeAsString(jsonString);
 //    });
 //
 //    // READ
 //    // Get json file information
 //    // Convert information from json to model
 //    // Convert models to list
 //    return mushroomsBackup;
 //  }
 //
 //
 //  set mushroomBackupList(List<MushroomDescription> list) {
 //    print("///////////////////");
 //    print("///////////////////");
 //    print("///////////////////");
 //    print("/////////hey//////////");
 //    print(list.length);
 //    _localFile.then((path) {
 //      print(path);
 //      var jsonMushroom = list[0].toJson();
 //      var jsonString = jsonEncode(jsonMushroom);
 //      print(jsonMushroom);
 //      print(jsonString);
 //      path.writeAsString(jsonString);
 //    });
 //
 //    // save {list : [jsons]}
 //    // WRITE
 //    // Convert list to json
 //    // Check if file exists
 //    // Create or overwritte file
 //    // Handle exceptions
 //    // Send failed events
 //  }